<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="3816"><g><title>[libc.so.6] (7 samples, 0.18%)</title><rect x="0.0000%" y="341" width="0.1834%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="7"/><text x="0.2500%" y="351.50"></text></g><g><title>cfree (4 samples, 0.10%)</title><rect x="0.1834%" y="341" width="0.1048%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="4"/><text x="0.4334%" y="351.50"></text></g><g><title>malloc (6 samples, 0.16%)</title><rect x="0.2883%" y="341" width="0.1572%" height="15" fill="rgb(221,193,54)" fg:x="11" fg:w="6"/><text x="0.5383%" y="351.50"></text></g><g><title>winter_math::field::f128::mul (4 samples, 0.10%)</title><rect x="0.4455%" y="341" width="0.1048%" height="15" fill="rgb(248,212,6)" fg:x="17" fg:w="4"/><text x="0.6955%" y="351.50"></text></g><g><title>[[heap]] (22 samples, 0.58%)</title><rect x="0.0000%" y="357" width="0.5765%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="22"/><text x="0.2500%" y="367.50"></text></g><g><title>winter_prover::constraints::evaluator::ConstraintEvaluator&lt;A,E&gt;::evaluate (1 samples, 0.03%)</title><rect x="0.5503%" y="341" width="0.0262%" height="15" fill="rgb(232,128,0)" fg:x="21" fg:w="1"/><text x="0.8003%" y="351.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="0.5765%" y="341" width="0.0524%" height="15" fill="rgb(207,160,47)" fg:x="22" fg:w="2"/><text x="0.8265%" y="351.50"></text></g><g><title>[[stack]] (3 samples, 0.08%)</title><rect x="0.5765%" y="357" width="0.0786%" height="15" fill="rgb(228,23,34)" fg:x="22" fg:w="3"/><text x="0.8265%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="0.6289%" y="341" width="0.0262%" height="15" fill="rgb(218,30,26)" fg:x="24" fg:w="1"/><text x="0.8789%" y="351.50"></text></g><g><title>[anon] (50 samples, 1.31%)</title><rect x="0.6551%" y="357" width="1.3103%" height="15" fill="rgb(220,122,19)" fg:x="25" fg:w="50"/><text x="0.9051%" y="367.50"></text></g><g><title>winter_math::field::f128::mul (50 samples, 1.31%)</title><rect x="0.6551%" y="341" width="1.3103%" height="15" fill="rgb(250,228,42)" fg:x="25" fg:w="50"/><text x="0.9051%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.16%)</title><rect x="1.9654%" y="357" width="0.1572%" height="15" fill="rgb(240,193,28)" fg:x="75" fg:w="6"/><text x="2.2154%" y="367.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="2.0964%" y="341" width="0.0262%" height="15" fill="rgb(216,20,37)" fg:x="80" fg:w="1"/><text x="2.3464%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="2.0964%" y="325" width="0.0262%" height="15" fill="rgb(206,188,39)" fg:x="80" fg:w="1"/><text x="2.3464%" y="335.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="2.0964%" y="309" width="0.0262%" height="15" fill="rgb(217,207,13)" fg:x="80" fg:w="1"/><text x="2.3464%" y="319.50"></text></g><g><title>&lt;examples::do_work::air::DoWorkAir as winter_air::air::Air&gt;::evaluate_transition (3 samples, 0.08%)</title><rect x="2.1226%" y="341" width="0.0786%" height="15" fill="rgb(231,73,38)" fg:x="81" fg:w="3"/><text x="2.3726%" y="351.50"></text></g><g><title>[libc.so.6] (30 samples, 0.79%)</title><rect x="2.2013%" y="341" width="0.7862%" height="15" fill="rgb(225,20,46)" fg:x="84" fg:w="30"/><text x="2.4513%" y="351.50"></text></g><g><title>_blake3_hash_many_avx2 (17 samples, 0.45%)</title><rect x="2.9874%" y="341" width="0.4455%" height="15" fill="rgb(210,31,41)" fg:x="114" fg:w="17"/><text x="3.2374%" y="351.50"></text></g><g><title>cfree (5 samples, 0.13%)</title><rect x="3.4329%" y="341" width="0.1310%" height="15" fill="rgb(221,200,47)" fg:x="131" fg:w="5"/><text x="3.6829%" y="351.50"></text></g><g><title>malloc (4 samples, 0.10%)</title><rect x="3.5639%" y="341" width="0.1048%" height="15" fill="rgb(226,26,5)" fg:x="136" fg:w="4"/><text x="3.8139%" y="351.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (21 samples, 0.55%)</title><rect x="3.6688%" y="341" width="0.5503%" height="15" fill="rgb(249,33,26)" fg:x="140" fg:w="21"/><text x="3.9188%" y="351.50"></text></g><g><title>winter_math::field::f128::mul (97 samples, 2.54%)</title><rect x="4.2191%" y="341" width="2.5419%" height="15" fill="rgb(235,183,28)" fg:x="161" fg:w="97"/><text x="4.4691%" y="351.50">wi..</text></g><g><title>winter_prover::Prover::build_trace_commitment (6 samples, 0.16%)</title><rect x="6.7610%" y="341" width="0.1572%" height="15" fill="rgb(221,5,38)" fg:x="258" fg:w="6"/><text x="7.0110%" y="351.50"></text></g><g><title>winter_prover::constraints::boundary::BoundaryConstraintGroup&lt;E&gt;::evaluate_main (2 samples, 0.05%)</title><rect x="6.9182%" y="341" width="0.0524%" height="15" fill="rgb(247,18,42)" fg:x="264" fg:w="2"/><text x="7.1682%" y="351.50"></text></g><g><title>[unknown] (187 samples, 4.90%)</title><rect x="2.1226%" y="357" width="4.9004%" height="15" fill="rgb(241,131,45)" fg:x="81" fg:w="187"/><text x="2.3726%" y="367.50">[unkno..</text></g><g><title>winter_prover::constraints::evaluator::ConstraintEvaluator&lt;A,E&gt;::evaluate_main_transition (2 samples, 0.05%)</title><rect x="6.9706%" y="341" width="0.0524%" height="15" fill="rgb(249,31,29)" fg:x="266" fg:w="2"/><text x="7.2206%" y="351.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="7.1017%" y="229" width="0.0262%" height="15" fill="rgb(225,111,53)" fg:x="271" fg:w="1"/><text x="7.3517%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="7.1017%" y="213" width="0.0262%" height="15" fill="rgb(238,160,17)" fg:x="271" fg:w="1"/><text x="7.3517%" y="223.50"></text></g><g><title>examples::do_work::prover::build_do_work_trace (14 samples, 0.37%)</title><rect x="7.0231%" y="245" width="0.3669%" height="15" fill="rgb(214,148,48)" fg:x="268" fg:w="14"/><text x="7.2731%" y="255.50"></text></g><g><title>winter_math::field::f128::mul (10 samples, 0.26%)</title><rect x="7.1279%" y="229" width="0.2621%" height="15" fill="rgb(232,36,49)" fg:x="272" fg:w="10"/><text x="7.3779%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="10.9015%" y="229" width="0.0262%" height="15" fill="rgb(209,103,24)" fg:x="416" fg:w="1"/><text x="11.1515%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="10.9015%" y="213" width="0.0262%" height="15" fill="rgb(229,88,8)" fg:x="416" fg:w="1"/><text x="11.1515%" y="223.50"></text></g><g><title>&lt;examples::do_work::air::DoWorkAir as winter_air::air::Air&gt;::new (1 samples, 0.03%)</title><rect x="10.9277%" y="229" width="0.0262%" height="15" fill="rgb(213,181,19)" fg:x="417" fg:w="1"/><text x="11.1777%" y="239.50"></text></g><g><title>winter_math::field::traits::StarkField::get_root_of_unity (1 samples, 0.03%)</title><rect x="10.9277%" y="213" width="0.0262%" height="15" fill="rgb(254,191,54)" fg:x="417" fg:w="1"/><text x="11.1777%" y="223.50"></text></g><g><title>winter_math::field::f128::mul (1 samples, 0.03%)</title><rect x="10.9277%" y="197" width="0.0262%" height="15" fill="rgb(241,83,37)" fg:x="417" fg:w="1"/><text x="11.1777%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.05%)</title><rect x="10.9539%" y="229" width="0.0524%" height="15" fill="rgb(233,36,39)" fg:x="418" fg:w="2"/><text x="11.2039%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="10.9539%" y="213" width="0.0524%" height="15" fill="rgb(226,3,54)" fg:x="418" fg:w="2"/><text x="11.2039%" y="223.50"></text></g><g><title>realloc (1 samples, 0.03%)</title><rect x="10.9801%" y="197" width="0.0262%" height="15" fill="rgb(245,192,40)" fg:x="419" fg:w="1"/><text x="11.2301%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="10.9801%" y="181" width="0.0262%" height="15" fill="rgb(238,167,29)" fg:x="419" fg:w="1"/><text x="11.2301%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="10.9801%" y="165" width="0.0262%" height="15" fill="rgb(232,182,51)" fg:x="419" fg:w="1"/><text x="11.2301%" y="175.50"></text></g><g><title>blake3::hash (2 samples, 0.05%)</title><rect x="11.0063%" y="229" width="0.0524%" height="15" fill="rgb(231,60,39)" fg:x="420" fg:w="2"/><text x="11.2563%" y="239.50"></text></g><g><title>cfree (1 samples, 0.03%)</title><rect x="11.0587%" y="229" width="0.0262%" height="15" fill="rgb(208,69,12)" fg:x="422" fg:w="1"/><text x="11.3087%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="11.0587%" y="213" width="0.0262%" height="15" fill="rgb(235,93,37)" fg:x="422" fg:w="1"/><text x="11.3087%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="11.0587%" y="197" width="0.0262%" height="15" fill="rgb(213,116,39)" fg:x="422" fg:w="1"/><text x="11.3087%" y="207.50"></text></g><g><title>winter_fri::folding::apply_drp (1 samples, 0.03%)</title><rect x="11.0849%" y="229" width="0.0262%" height="15" fill="rgb(222,207,29)" fg:x="423" fg:w="1"/><text x="11.3349%" y="239.50"></text></g><g><title>winter_math::fft::evaluate_poly_with_offset (1 samples, 0.03%)</title><rect x="11.1111%" y="229" width="0.0262%" height="15" fill="rgb(206,96,30)" fg:x="424" fg:w="1"/><text x="11.3611%" y="239.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (1 samples, 0.03%)</title><rect x="11.1111%" y="213" width="0.0262%" height="15" fill="rgb(218,138,4)" fg:x="424" fg:w="1"/><text x="11.3611%" y="223.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (1 samples, 0.03%)</title><rect x="11.1111%" y="197" width="0.0262%" height="15" fill="rgb(250,191,14)" fg:x="424" fg:w="1"/><text x="11.3611%" y="207.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (1 samples, 0.03%)</title><rect x="11.1111%" y="181" width="0.0262%" height="15" fill="rgb(239,60,40)" fg:x="424" fg:w="1"/><text x="11.3611%" y="191.50"></text></g><g><title>winter_math::field::f128::mul (1 samples, 0.03%)</title><rect x="11.1111%" y="165" width="0.0262%" height="15" fill="rgb(206,27,48)" fg:x="424" fg:w="1"/><text x="11.3611%" y="175.50"></text></g><g><title>[libc.so.6] (771 samples, 20.20%)</title><rect x="13.0765%" y="213" width="20.2044%" height="15" fill="rgb(225,35,8)" fg:x="499" fg:w="771"/><text x="13.3265%" y="223.50">[libc.so.6]</text></g><g><title>blake3::hash (1 samples, 0.03%)</title><rect x="33.2809%" y="213" width="0.0262%" height="15" fill="rgb(250,213,24)" fg:x="1270" fg:w="1"/><text x="33.5309%" y="223.50"></text></g><g><title>blake3::compress_subtree_wide (1 samples, 0.03%)</title><rect x="33.2809%" y="197" width="0.0262%" height="15" fill="rgb(247,123,22)" fg:x="1270" fg:w="1"/><text x="33.5309%" y="207.50"></text></g><g><title>cfree (81 samples, 2.12%)</title><rect x="33.3071%" y="213" width="2.1226%" height="15" fill="rgb(231,138,38)" fg:x="1271" fg:w="81"/><text x="33.5571%" y="223.50">c..</text></g><g><title>[libc.so.6] (64 samples, 1.68%)</title><rect x="33.7526%" y="197" width="1.6771%" height="15" fill="rgb(231,145,46)" fg:x="1288" fg:w="64"/><text x="34.0026%" y="207.50"></text></g><g><title>[libc.so.6] (19 samples, 0.50%)</title><rect x="34.9319%" y="181" width="0.4979%" height="15" fill="rgb(251,118,11)" fg:x="1333" fg:w="19"/><text x="35.1819%" y="191.50"></text></g><g><title>malloc (165 samples, 4.32%)</title><rect x="35.4298%" y="213" width="4.3239%" height="15" fill="rgb(217,147,25)" fg:x="1352" fg:w="165"/><text x="35.6798%" y="223.50">malloc</text></g><g><title>[libc.so.6] (128 samples, 3.35%)</title><rect x="36.3994%" y="197" width="3.3543%" height="15" fill="rgb(247,81,37)" fg:x="1389" fg:w="128"/><text x="36.6494%" y="207.50">[li..</text></g><g><title>[libc.so.6] (12 samples, 0.31%)</title><rect x="39.4392%" y="181" width="0.3145%" height="15" fill="rgb(209,12,38)" fg:x="1505" fg:w="12"/><text x="39.6892%" y="191.50"></text></g><g><title>winter_math::fft::get_inv_twiddles (4 samples, 0.10%)</title><rect x="39.7537%" y="197" width="0.1048%" height="15" fill="rgb(227,1,9)" fg:x="1517" fg:w="4"/><text x="40.0037%" y="207.50"></text></g><g><title>winter_math::utils::get_power_series (4 samples, 0.10%)</title><rect x="39.7537%" y="181" width="0.1048%" height="15" fill="rgb(248,47,43)" fg:x="1517" fg:w="4"/><text x="40.0037%" y="191.50"></text></g><g><title>winter_math::field::f128::mul (4 samples, 0.10%)</title><rect x="39.7537%" y="165" width="0.1048%" height="15" fill="rgb(221,10,30)" fg:x="1517" fg:w="4"/><text x="40.0037%" y="175.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (1 samples, 0.03%)</title><rect x="40.1992%" y="37" width="0.0262%" height="15" fill="rgb(210,229,1)" fg:x="1534" fg:w="1"/><text x="40.4492%" y="47.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (4 samples, 0.10%)</title><rect x="40.1730%" y="53" width="0.1048%" height="15" fill="rgb(222,148,37)" fg:x="1533" fg:w="4"/><text x="40.4230%" y="63.50"></text></g><g><title>winter_math::field::f128::mul (2 samples, 0.05%)</title><rect x="40.2254%" y="37" width="0.0524%" height="15" fill="rgb(234,67,33)" fg:x="1535" fg:w="2"/><text x="40.4754%" y="47.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (7 samples, 0.18%)</title><rect x="40.1730%" y="69" width="0.1834%" height="15" fill="rgb(247,98,35)" fg:x="1533" fg:w="7"/><text x="40.4230%" y="79.50"></text></g><g><title>winter_math::field::f128::mul (3 samples, 0.08%)</title><rect x="40.2778%" y="53" width="0.0786%" height="15" fill="rgb(247,138,52)" fg:x="1537" fg:w="3"/><text x="40.5278%" y="63.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (11 samples, 0.29%)</title><rect x="40.1468%" y="85" width="0.2883%" height="15" fill="rgb(213,79,30)" fg:x="1532" fg:w="11"/><text x="40.3968%" y="95.50"></text></g><g><title>winter_math::field::f128::mul (3 samples, 0.08%)</title><rect x="40.3564%" y="69" width="0.0786%" height="15" fill="rgb(246,177,23)" fg:x="1540" fg:w="3"/><text x="40.6064%" y="79.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (14 samples, 0.37%)</title><rect x="40.1205%" y="133" width="0.3669%" height="15" fill="rgb(230,62,27)" fg:x="1531" fg:w="14"/><text x="40.3705%" y="143.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (14 samples, 0.37%)</title><rect x="40.1205%" y="117" width="0.3669%" height="15" fill="rgb(216,154,8)" fg:x="1531" fg:w="14"/><text x="40.3705%" y="127.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (13 samples, 0.34%)</title><rect x="40.1468%" y="101" width="0.3407%" height="15" fill="rgb(244,35,45)" fg:x="1532" fg:w="13"/><text x="40.3968%" y="111.50"></text></g><g><title>winter_math::field::f128::mul (2 samples, 0.05%)</title><rect x="40.4350%" y="85" width="0.0524%" height="15" fill="rgb(251,115,12)" fg:x="1543" fg:w="2"/><text x="40.6850%" y="95.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (17 samples, 0.45%)</title><rect x="40.0681%" y="165" width="0.4455%" height="15" fill="rgb(240,54,50)" fg:x="1529" fg:w="17"/><text x="40.3181%" y="175.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (16 samples, 0.42%)</title><rect x="40.0943%" y="149" width="0.4193%" height="15" fill="rgb(233,84,52)" fg:x="1530" fg:w="16"/><text x="40.3443%" y="159.50"></text></g><g><title>winter_math::field::f128::mul (1 samples, 0.03%)</title><rect x="40.4874%" y="133" width="0.0262%" height="15" fill="rgb(207,117,47)" fg:x="1545" fg:w="1"/><text x="40.7374%" y="143.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (24 samples, 0.63%)</title><rect x="39.9371%" y="181" width="0.6289%" height="15" fill="rgb(249,43,39)" fg:x="1524" fg:w="24"/><text x="40.1871%" y="191.50"></text></g><g><title>winter_math::field::f128::mul (2 samples, 0.05%)</title><rect x="40.5136%" y="165" width="0.0524%" height="15" fill="rgb(209,38,44)" fg:x="1546" fg:w="2"/><text x="40.7636%" y="175.50"></text></g><g><title>winter_prover::matrix::col_matrix::ColMatrix&lt;E&gt;::interpolate_columns (37 samples, 0.97%)</title><rect x="39.7537%" y="213" width="0.9696%" height="15" fill="rgb(236,212,23)" fg:x="1517" fg:w="37"/><text x="40.0037%" y="223.50"></text></g><g><title>winter_math::fft::interpolate_poly (33 samples, 0.86%)</title><rect x="39.8585%" y="197" width="0.8648%" height="15" fill="rgb(242,79,21)" fg:x="1521" fg:w="33"/><text x="40.1085%" y="207.50"></text></g><g><title>winter_math::field::f128::mul (6 samples, 0.16%)</title><rect x="40.5660%" y="181" width="0.1572%" height="15" fill="rgb(211,96,35)" fg:x="1548" fg:w="6"/><text x="40.8160%" y="191.50"></text></g><g><title>__libc_calloc (1 samples, 0.03%)</title><rect x="45.6237%" y="197" width="0.0262%" height="15" fill="rgb(253,215,40)" fg:x="1741" fg:w="1"/><text x="45.8737%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="45.6237%" y="181" width="0.0262%" height="15" fill="rgb(211,81,21)" fg:x="1741" fg:w="1"/><text x="45.8737%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="45.6237%" y="165" width="0.0262%" height="15" fill="rgb(208,190,38)" fg:x="1741" fg:w="1"/><text x="45.8737%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="45.6237%" y="149" width="0.0262%" height="15" fill="rgb(235,213,38)" fg:x="1741" fg:w="1"/><text x="45.8737%" y="159.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (54 samples, 1.42%)</title><rect x="58.5692%" y="53" width="1.4151%" height="15" fill="rgb(237,122,38)" fg:x="2235" fg:w="54"/><text x="58.8192%" y="63.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (165 samples, 4.32%)</title><rect x="57.3899%" y="69" width="4.3239%" height="15" fill="rgb(244,218,35)" fg:x="2190" fg:w="165"/><text x="57.6399%" y="79.50">winte..</text></g><g><title>winter_math::field::f128::mul (66 samples, 1.73%)</title><rect x="59.9843%" y="53" width="1.7296%" height="15" fill="rgb(240,68,47)" fg:x="2289" fg:w="66"/><text x="60.2343%" y="63.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (310 samples, 8.12%)</title><rect x="55.9748%" y="85" width="8.1237%" height="15" fill="rgb(210,16,53)" fg:x="2136" fg:w="310"/><text x="56.2248%" y="95.50">winter_math..</text></g><g><title>winter_math::field::f128::mul (91 samples, 2.38%)</title><rect x="61.7138%" y="69" width="2.3847%" height="15" fill="rgb(235,124,12)" fg:x="2355" fg:w="91"/><text x="61.9638%" y="79.50">wi..</text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (487 samples, 12.76%)</title><rect x="54.6646%" y="101" width="12.7621%" height="15" fill="rgb(224,169,11)" fg:x="2086" fg:w="487"/><text x="54.9146%" y="111.50">winter_math::fft::f..</text></g><g><title>winter_math::field::f128::mul (127 samples, 3.33%)</title><rect x="64.0985%" y="85" width="3.3281%" height="15" fill="rgb(250,166,2)" fg:x="2446" fg:w="127"/><text x="64.3485%" y="95.50">win..</text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (651 samples, 17.06%)</title><rect x="53.1709%" y="117" width="17.0597%" height="15" fill="rgb(242,216,29)" fg:x="2029" fg:w="651"/><text x="53.4209%" y="127.50">winter_math::fft::fft_inpu..</text></g><g><title>winter_math::field::f128::mul (107 samples, 2.80%)</title><rect x="67.4266%" y="101" width="2.8040%" height="15" fill="rgb(230,116,27)" fg:x="2573" fg:w="107"/><text x="67.6766%" y="111.50">wi..</text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (830 samples, 21.75%)</title><rect x="51.7558%" y="133" width="21.7505%" height="15" fill="rgb(228,99,48)" fg:x="1975" fg:w="830"/><text x="52.0058%" y="143.50">winter_math::fft::fft_inputs::fft_..</text></g><g><title>winter_math::field::f128::mul (125 samples, 3.28%)</title><rect x="70.2306%" y="117" width="3.2757%" height="15" fill="rgb(253,11,6)" fg:x="2680" fg:w="125"/><text x="70.4806%" y="127.50">win..</text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (1,017 samples, 26.65%)</title><rect x="50.1310%" y="149" width="26.6509%" height="15" fill="rgb(247,143,39)" fg:x="1913" fg:w="1017"/><text x="50.3810%" y="159.50">winter_math::fft::fft_inputs::fft_in_place</text></g><g><title>winter_math::field::f128::mul (125 samples, 3.28%)</title><rect x="73.5063%" y="133" width="3.2757%" height="15" fill="rgb(236,97,10)" fg:x="2805" fg:w="125"/><text x="73.7563%" y="143.50">win..</text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (1,201 samples, 31.47%)</title><rect x="48.6111%" y="165" width="31.4727%" height="15" fill="rgb(233,208,19)" fg:x="1855" fg:w="1201"/><text x="48.8611%" y="175.50">winter_math::fft::fft_inputs::fft_in_place</text></g><g><title>winter_math::field::f128::mul (126 samples, 3.30%)</title><rect x="76.7820%" y="149" width="3.3019%" height="15" fill="rgb(216,164,2)" fg:x="2930" fg:w="126"/><text x="77.0320%" y="159.50">win..</text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (1,373 samples, 35.98%)</title><rect x="47.1174%" y="181" width="35.9801%" height="15" fill="rgb(220,129,5)" fg:x="1798" fg:w="1373"/><text x="47.3674%" y="191.50">winter_math::fft::fft_inputs::fft_in_place</text></g><g><title>winter_math::field::f128::mul (115 samples, 3.01%)</title><rect x="80.0839%" y="165" width="3.0136%" height="15" fill="rgb(242,17,10)" fg:x="3056" fg:w="115"/><text x="80.3339%" y="175.50">win..</text></g><g><title>winter_prover::Prover::build_trace_commitment (2,880 samples, 75.47%)</title><rect x="11.1373%" y="229" width="75.4717%" height="15" fill="rgb(242,107,0)" fg:x="425" fg:w="2880"/><text x="11.3873%" y="239.50">winter_prover::Prover::build_trace_commitment</text></g><g><title>winter_prover::matrix::row_matrix::RowMatrix&lt;E&gt;::evaluate_polys_over (1,751 samples, 45.89%)</title><rect x="40.7233%" y="213" width="45.8857%" height="15" fill="rgb(251,28,31)" fg:x="1554" fg:w="1751"/><text x="40.9733%" y="223.50">winter_prover::matrix::row_matrix::RowMatrix&lt;E&gt;::evaluate_polys_over</text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (1,563 samples, 40.96%)</title><rect x="45.6499%" y="197" width="40.9591%" height="15" fill="rgb(233,223,10)" fg:x="1742" fg:w="1563"/><text x="45.8999%" y="207.50">winter_math::fft::fft_inputs::fft_in_place</text></g><g><title>winter_math::field::f128::mul (134 samples, 3.51%)</title><rect x="83.0975%" y="181" width="3.5115%" height="15" fill="rgb(215,21,27)" fg:x="3171" fg:w="134"/><text x="83.3475%" y="191.50">win..</text></g><g><title>winter_prover::composer::DeepCompositionPoly&lt;E&gt;::add_trace_polys (27 samples, 0.71%)</title><rect x="86.6090%" y="229" width="0.7075%" height="15" fill="rgb(232,23,21)" fg:x="3305" fg:w="27"/><text x="86.8590%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="88.5220%" y="213" width="0.0262%" height="15" fill="rgb(244,5,23)" fg:x="3378" fg:w="1"/><text x="88.7720%" y="223.50"></text></g><g><title>cfree (1 samples, 0.03%)</title><rect x="88.5482%" y="213" width="0.0262%" height="15" fill="rgb(226,81,46)" fg:x="3379" fg:w="1"/><text x="88.7982%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="88.5482%" y="197" width="0.0262%" height="15" fill="rgb(247,70,30)" fg:x="3379" fg:w="1"/><text x="88.7982%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="88.5482%" y="181" width="0.0262%" height="15" fill="rgb(212,68,19)" fg:x="3379" fg:w="1"/><text x="88.7982%" y="191.50"></text></g><g><title>winter_math::fft::get_inv_twiddles (5 samples, 0.13%)</title><rect x="88.5744%" y="213" width="0.1310%" height="15" fill="rgb(240,187,13)" fg:x="3380" fg:w="5"/><text x="88.8244%" y="223.50"></text></g><g><title>winter_math::utils::get_power_series (5 samples, 0.13%)</title><rect x="88.5744%" y="197" width="0.1310%" height="15" fill="rgb(223,113,26)" fg:x="3380" fg:w="5"/><text x="88.8244%" y="207.50"></text></g><g><title>winter_math::field::f128::mul (5 samples, 0.13%)</title><rect x="88.5744%" y="181" width="0.1310%" height="15" fill="rgb(206,192,2)" fg:x="3380" fg:w="5"/><text x="88.8244%" y="191.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (4 samples, 0.10%)</title><rect x="89.5964%" y="37" width="0.1048%" height="15" fill="rgb(241,108,4)" fg:x="3419" fg:w="4"/><text x="89.8464%" y="47.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (8 samples, 0.21%)</title><rect x="89.5178%" y="53" width="0.2096%" height="15" fill="rgb(247,173,49)" fg:x="3416" fg:w="8"/><text x="89.7678%" y="63.50"></text></g><g><title>winter_math::field::f128::mul (1 samples, 0.03%)</title><rect x="89.7013%" y="37" width="0.0262%" height="15" fill="rgb(224,114,35)" fg:x="3423" fg:w="1"/><text x="89.9513%" y="47.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (15 samples, 0.39%)</title><rect x="89.4130%" y="69" width="0.3931%" height="15" fill="rgb(245,159,27)" fg:x="3412" fg:w="15"/><text x="89.6630%" y="79.50"></text></g><g><title>winter_math::field::f128::mul (3 samples, 0.08%)</title><rect x="89.7275%" y="53" width="0.0786%" height="15" fill="rgb(245,172,44)" fg:x="3424" fg:w="3"/><text x="89.9775%" y="63.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (25 samples, 0.66%)</title><rect x="89.3868%" y="85" width="0.6551%" height="15" fill="rgb(236,23,11)" fg:x="3411" fg:w="25"/><text x="89.6368%" y="95.50"></text></g><g><title>winter_math::field::f128::mul (9 samples, 0.24%)</title><rect x="89.8061%" y="69" width="0.2358%" height="15" fill="rgb(205,117,38)" fg:x="3427" fg:w="9"/><text x="90.0561%" y="79.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (34 samples, 0.89%)</title><rect x="89.3082%" y="101" width="0.8910%" height="15" fill="rgb(237,72,25)" fg:x="3408" fg:w="34"/><text x="89.5582%" y="111.50"></text></g><g><title>winter_math::field::f128::mul (6 samples, 0.16%)</title><rect x="90.0419%" y="85" width="0.1572%" height="15" fill="rgb(244,70,9)" fg:x="3436" fg:w="6"/><text x="90.2919%" y="95.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (38 samples, 1.00%)</title><rect x="89.3082%" y="117" width="0.9958%" height="15" fill="rgb(217,125,39)" fg:x="3408" fg:w="38"/><text x="89.5582%" y="127.50"></text></g><g><title>winter_math::field::f128::mul (4 samples, 0.10%)</title><rect x="90.1992%" y="101" width="0.1048%" height="15" fill="rgb(235,36,10)" fg:x="3442" fg:w="4"/><text x="90.4492%" y="111.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (44 samples, 1.15%)</title><rect x="89.2558%" y="133" width="1.1530%" height="15" fill="rgb(251,123,47)" fg:x="3406" fg:w="44"/><text x="89.5058%" y="143.50"></text></g><g><title>winter_math::field::f128::mul (4 samples, 0.10%)</title><rect x="90.3040%" y="117" width="0.1048%" height="15" fill="rgb(221,13,13)" fg:x="3446" fg:w="4"/><text x="90.5540%" y="127.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (51 samples, 1.34%)</title><rect x="89.2296%" y="149" width="1.3365%" height="15" fill="rgb(238,131,9)" fg:x="3405" fg:w="51"/><text x="89.4796%" y="159.50"></text></g><g><title>winter_math::field::f128::mul (6 samples, 0.16%)</title><rect x="90.4088%" y="133" width="0.1572%" height="15" fill="rgb(211,50,8)" fg:x="3450" fg:w="6"/><text x="90.6588%" y="143.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (62 samples, 1.62%)</title><rect x="89.0723%" y="165" width="1.6247%" height="15" fill="rgb(245,182,24)" fg:x="3399" fg:w="62"/><text x="89.3223%" y="175.50"></text></g><g><title>winter_math::field::f128::mul (5 samples, 0.13%)</title><rect x="90.5660%" y="149" width="0.1310%" height="15" fill="rgb(242,14,37)" fg:x="3456" fg:w="5"/><text x="90.8160%" y="159.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (69 samples, 1.81%)</title><rect x="88.9937%" y="181" width="1.8082%" height="15" fill="rgb(246,228,12)" fg:x="3396" fg:w="69"/><text x="89.2437%" y="191.50">w..</text></g><g><title>winter_math::field::f128::mul (4 samples, 0.10%)</title><rect x="90.6971%" y="165" width="0.1048%" height="15" fill="rgb(213,55,15)" fg:x="3461" fg:w="4"/><text x="90.9471%" y="175.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (77 samples, 2.02%)</title><rect x="88.8627%" y="197" width="2.0178%" height="15" fill="rgb(209,9,3)" fg:x="3391" fg:w="77"/><text x="89.1127%" y="207.50">w..</text></g><g><title>winter_math::field::f128::mul (3 samples, 0.08%)</title><rect x="90.8019%" y="181" width="0.0786%" height="15" fill="rgb(230,59,30)" fg:x="3465" fg:w="3"/><text x="91.0519%" y="191.50"></text></g><g><title>winter_math::fft::interpolate_poly_with_offset (101 samples, 2.65%)</title><rect x="88.7055%" y="213" width="2.6468%" height="15" fill="rgb(209,121,21)" fg:x="3385" fg:w="101"/><text x="88.9555%" y="223.50">wi..</text></g><g><title>winter_math::field::f128::mul (18 samples, 0.47%)</title><rect x="90.8805%" y="197" width="0.4717%" height="15" fill="rgb(220,109,13)" fg:x="3468" fg:w="18"/><text x="91.1305%" y="207.50"></text></g><g><title>winter_math::field::f128::mul (16 samples, 0.42%)</title><rect x="91.3522%" y="213" width="0.4193%" height="15" fill="rgb(232,18,1)" fg:x="3486" fg:w="16"/><text x="91.6022%" y="223.50"></text></g><g><title>winter_math::field::f128::mul (8 samples, 0.21%)</title><rect x="91.8763%" y="197" width="0.2096%" height="15" fill="rgb(215,41,42)" fg:x="3506" fg:w="8"/><text x="92.1263%" y="207.50"></text></g><g><title>winter_prover::constraints::evaluation_table::ConstraintEvaluationTable&lt;E&gt;::into_comb_poly (241 samples, 6.32%)</title><rect x="87.3166%" y="229" width="6.3155%" height="15" fill="rgb(224,123,36)" fg:x="3332" fg:w="241"/><text x="87.5666%" y="239.50">winter_p..</text></g><g><title>winter_prover::constraints::evaluation_table::get_inv_evaluation (71 samples, 1.86%)</title><rect x="91.7715%" y="213" width="1.8606%" height="15" fill="rgb(240,125,3)" fg:x="3502" fg:w="71"/><text x="92.0215%" y="223.50">w..</text></g><g><title>winter_math::utils::batch_inversion (59 samples, 1.55%)</title><rect x="92.0860%" y="197" width="1.5461%" height="15" fill="rgb(205,98,50)" fg:x="3514" fg:w="59"/><text x="92.3360%" y="207.50"></text></g><g><title>winter_math::field::f128::mul (50 samples, 1.31%)</title><rect x="92.3218%" y="181" width="1.3103%" height="15" fill="rgb(205,185,37)" fg:x="3523" fg:w="50"/><text x="92.5718%" y="191.50"></text></g><g><title>[libc.so.6] (104 samples, 2.73%)</title><rect x="94.0776%" y="213" width="2.7254%" height="15" fill="rgb(238,207,15)" fg:x="3590" fg:w="104"/><text x="94.3276%" y="223.50">[l..</text></g><g><title>winter_math::field::f128::mul (10 samples, 0.26%)</title><rect x="96.8029%" y="213" width="0.2621%" height="15" fill="rgb(213,199,42)" fg:x="3694" fg:w="10"/><text x="97.0529%" y="223.50"></text></g><g><title>winter_prover::constraints::boundary::BoundaryConstraintGroup&lt;E&gt;::evaluate_main (17 samples, 0.45%)</title><rect x="97.0650%" y="213" width="0.4455%" height="15" fill="rgb(235,201,11)" fg:x="3704" fg:w="17"/><text x="97.3150%" y="223.50"></text></g><g><title>winter_math::field::f128::mul (9 samples, 0.24%)</title><rect x="97.2746%" y="197" width="0.2358%" height="15" fill="rgb(207,46,11)" fg:x="3712" fg:w="9"/><text x="97.5246%" y="207.50"></text></g><g><title>&lt;examples::do_work::air::DoWorkAir as winter_air::air::Air&gt;::evaluate_transition (22 samples, 0.58%)</title><rect x="97.6415%" y="197" width="0.5765%" height="15" fill="rgb(241,35,35)" fg:x="3726" fg:w="22"/><text x="97.8915%" y="207.50"></text></g><g><title>winter_math::field::f128::mul (19 samples, 0.50%)</title><rect x="97.7201%" y="181" width="0.4979%" height="15" fill="rgb(243,32,47)" fg:x="3729" fg:w="19"/><text x="97.9701%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="98.2180%" y="197" width="0.0262%" height="15" fill="rgb(247,202,23)" fg:x="3748" fg:w="1"/><text x="98.4680%" y="207.50"></text></g><g><title>cfree (7 samples, 0.18%)</title><rect x="98.2442%" y="197" width="0.1834%" height="15" fill="rgb(219,102,11)" fg:x="3749" fg:w="7"/><text x="98.4942%" y="207.50"></text></g><g><title>[libc.so.6] (6 samples, 0.16%)</title><rect x="98.2704%" y="181" width="0.1572%" height="15" fill="rgb(243,110,44)" fg:x="3750" fg:w="6"/><text x="98.5204%" y="191.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="98.4277%" y="197" width="0.0262%" height="15" fill="rgb(222,74,54)" fg:x="3756" fg:w="1"/><text x="98.6777%" y="207.50"></text></g><g><title>winter_prover::constraints::evaluator::ConstraintEvaluator&lt;A,E&gt;::evaluate (194 samples, 5.08%)</title><rect x="93.6321%" y="229" width="5.0839%" height="15" fill="rgb(216,99,12)" fg:x="3573" fg:w="194"/><text x="93.8821%" y="239.50">winter..</text></g><g><title>winter_prover::constraints::evaluator::ConstraintEvaluator&lt;A,E&gt;::evaluate_main_transition (46 samples, 1.21%)</title><rect x="97.5105%" y="213" width="1.2055%" height="15" fill="rgb(226,22,26)" fg:x="3721" fg:w="46"/><text x="97.7605%" y="223.50"></text></g><g><title>winter_math::field::f128::mul (10 samples, 0.26%)</title><rect x="98.4539%" y="197" width="0.2621%" height="15" fill="rgb(217,163,10)" fg:x="3757" fg:w="10"/><text x="98.7039%" y="207.50"></text></g><g><title>winter_prover::constraints::evaluator::ConstraintEvaluator&lt;A,E&gt;::new (1 samples, 0.03%)</title><rect x="98.7159%" y="229" width="0.0262%" height="15" fill="rgb(213,25,53)" fg:x="3767" fg:w="1"/><text x="98.9659%" y="239.50"></text></g><g><title>winter_air::air::Air::get_boundary_constraints (1 samples, 0.03%)</title><rect x="98.7159%" y="213" width="0.0262%" height="15" fill="rgb(252,105,26)" fg:x="3767" fg:w="1"/><text x="98.9659%" y="223.50"></text></g><g><title>winter_math::field::f128::inv (1 samples, 0.03%)</title><rect x="98.7159%" y="197" width="0.0262%" height="15" fill="rgb(220,39,43)" fg:x="3767" fg:w="1"/><text x="98.9659%" y="207.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (2 samples, 0.05%)</title><rect x="98.7421%" y="165" width="0.0524%" height="15" fill="rgb(229,68,48)" fg:x="3768" fg:w="2"/><text x="98.9921%" y="175.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (2 samples, 0.05%)</title><rect x="98.7421%" y="149" width="0.0524%" height="15" fill="rgb(252,8,32)" fg:x="3768" fg:w="2"/><text x="98.9921%" y="159.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (2 samples, 0.05%)</title><rect x="98.7421%" y="133" width="0.0524%" height="15" fill="rgb(223,20,43)" fg:x="3768" fg:w="2"/><text x="98.9921%" y="143.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (2 samples, 0.05%)</title><rect x="98.7421%" y="117" width="0.0524%" height="15" fill="rgb(229,81,49)" fg:x="3768" fg:w="2"/><text x="98.9921%" y="127.50"></text></g><g><title>winter_math::field::f128::mul (2 samples, 0.05%)</title><rect x="98.7421%" y="101" width="0.0524%" height="15" fill="rgb(236,28,36)" fg:x="3768" fg:w="2"/><text x="98.9921%" y="111.50"></text></g><g><title>winter_prover::matrix::row_matrix::RowMatrix&lt;E&gt;::evaluate_polys_over (3 samples, 0.08%)</title><rect x="98.7421%" y="229" width="0.0786%" height="15" fill="rgb(249,185,26)" fg:x="3768" fg:w="3"/><text x="98.9921%" y="239.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (3 samples, 0.08%)</title><rect x="98.7421%" y="213" width="0.0786%" height="15" fill="rgb(249,174,33)" fg:x="3768" fg:w="3"/><text x="98.9921%" y="223.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (3 samples, 0.08%)</title><rect x="98.7421%" y="197" width="0.0786%" height="15" fill="rgb(233,201,37)" fg:x="3768" fg:w="3"/><text x="98.9921%" y="207.50"></text></g><g><title>winter_math::fft::fft_inputs::fft_in_place (3 samples, 0.08%)</title><rect x="98.7421%" y="181" width="0.0786%" height="15" fill="rgb(221,78,26)" fg:x="3768" fg:w="3"/><text x="98.9921%" y="191.50"></text></g><g><title>winter_math::field::f128::mul (1 samples, 0.03%)</title><rect x="98.7945%" y="165" width="0.0262%" height="15" fill="rgb(250,127,30)" fg:x="3770" fg:w="1"/><text x="99.0445%" y="175.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="98.8208%" y="213" width="0.0524%" height="15" fill="rgb(230,49,44)" fg:x="3771" fg:w="2"/><text x="99.0708%" y="223.50"></text></g><g><title>winter_prover::trace::commitment::build_segment_queries (3 samples, 0.08%)</title><rect x="98.8208%" y="229" width="0.0786%" height="15" fill="rgb(229,67,23)" fg:x="3771" fg:w="3"/><text x="99.0708%" y="239.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="98.8732%" y="213" width="0.0262%" height="15" fill="rgb(249,83,47)" fg:x="3773" fg:w="1"/><text x="99.1232%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="98.8732%" y="197" width="0.0262%" height="15" fill="rgb(215,43,3)" fg:x="3773" fg:w="1"/><text x="99.1232%" y="207.50"></text></g><g><title>winter_math::field::traits::StarkField::get_root_of_unity (1 samples, 0.03%)</title><rect x="98.8994%" y="213" width="0.0262%" height="15" fill="rgb(238,154,13)" fg:x="3774" fg:w="1"/><text x="99.1494%" y="223.50"></text></g><g><title>winter_math::field::f128::mul (1 samples, 0.03%)</title><rect x="98.8994%" y="197" width="0.0262%" height="15" fill="rgb(219,56,2)" fg:x="3774" fg:w="1"/><text x="99.1494%" y="207.50"></text></g><g><title>&lt;examples::do_work::DoWorkExample&lt;H&gt; as examples::Example&gt;::prove (3,520 samples, 92.24%)</title><rect x="7.0231%" y="261" width="92.2432%" height="15" fill="rgb(233,0,4)" fg:x="268" fg:w="3520"/><text x="7.2731%" y="271.50">&lt;examples::do_work::DoWorkExample&lt;H&gt; as examples::Example&gt;::prove</text></g><g><title>winter_prover::Prover::generate_proof (3,506 samples, 91.88%)</title><rect x="7.3899%" y="245" width="91.8763%" height="15" fill="rgb(235,30,7)" fg:x="282" fg:w="3506"/><text x="7.6399%" y="255.50">winter_prover::Prover::generate_proof</text></g><g><title>winter_prover::trace::poly_table::TracePolyTable&lt;E&gt;::get_ood_frame (14 samples, 0.37%)</title><rect x="98.8994%" y="229" width="0.3669%" height="15" fill="rgb(250,79,13)" fg:x="3774" fg:w="14"/><text x="99.1494%" y="239.50"></text></g><g><title>winter_prover::trace::poly_table::TracePolyTable&lt;E&gt;::evaluate_at (13 samples, 0.34%)</title><rect x="98.9256%" y="213" width="0.3407%" height="15" fill="rgb(211,146,34)" fg:x="3775" fg:w="13"/><text x="99.1756%" y="223.50"></text></g><g><title>winter_prover::matrix::col_matrix::ColMatrix&lt;E&gt;::evaluate_columns_at (13 samples, 0.34%)</title><rect x="98.9256%" y="197" width="0.3407%" height="15" fill="rgb(228,22,38)" fg:x="3775" fg:w="13"/><text x="99.1756%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="99.2662%" y="229" width="0.0262%" height="15" fill="rgb(235,168,5)" fg:x="3788" fg:w="1"/><text x="99.5162%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="99.2662%" y="213" width="0.0262%" height="15" fill="rgb(221,155,16)" fg:x="3788" fg:w="1"/><text x="99.5162%" y="223.50"></text></g><g><title>realloc (1 samples, 0.03%)</title><rect x="99.2662%" y="197" width="0.0262%" height="15" fill="rgb(215,215,53)" fg:x="3788" fg:w="1"/><text x="99.5162%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="99.2662%" y="181" width="0.0262%" height="15" fill="rgb(223,4,10)" fg:x="3788" fg:w="1"/><text x="99.5162%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="99.2662%" y="165" width="0.0262%" height="15" fill="rgb(234,103,6)" fg:x="3788" fg:w="1"/><text x="99.5162%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="99.2662%" y="149" width="0.0262%" height="15" fill="rgb(227,97,0)" fg:x="3788" fg:w="1"/><text x="99.5162%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="99.2662%" y="133" width="0.0262%" height="15" fill="rgb(234,150,53)" fg:x="3788" fg:w="1"/><text x="99.5162%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;winter_air::air::divisor::ConstraintDivisor&lt;winter_math::field::f128::BaseElement&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="99.2925%" y="229" width="0.0262%" height="15" fill="rgb(228,201,54)" fg:x="3789" fg:w="1"/><text x="99.5425%" y="239.50"></text></g><g><title>cfree (1 samples, 0.03%)</title><rect x="99.2925%" y="213" width="0.0262%" height="15" fill="rgb(222,22,37)" fg:x="3789" fg:w="1"/><text x="99.5425%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="99.2925%" y="197" width="0.0262%" height="15" fill="rgb(237,53,32)" fg:x="3789" fg:w="1"/><text x="99.5425%" y="207.50"></text></g><g><title>winter_verifier::channel::VerifierChannel&lt;E,H&gt;::new (1 samples, 0.03%)</title><rect x="99.3187%" y="229" width="0.0262%" height="15" fill="rgb(233,25,53)" fg:x="3790" fg:w="1"/><text x="99.5687%" y="239.50"></text></g><g><title>winter_air::proof::queries::JointTraceQueries::parse (1 samples, 0.03%)</title><rect x="99.3187%" y="213" width="0.0262%" height="15" fill="rgb(210,40,34)" fg:x="3790" fg:w="1"/><text x="99.5687%" y="223.50"></text></g><g><title>winter_air::proof::table::Table&lt;E&gt;::from_bytes (1 samples, 0.03%)</title><rect x="99.3187%" y="197" width="0.0262%" height="15" fill="rgb(241,220,44)" fg:x="3790" fg:w="1"/><text x="99.5687%" y="207.50"></text></g><g><title>winter_utils::serde::Deserializable::read_batch_from (1 samples, 0.03%)</title><rect x="99.3187%" y="181" width="0.0262%" height="15" fill="rgb(235,28,35)" fg:x="3790" fg:w="1"/><text x="99.5687%" y="191.50"></text></g><g><title>&lt;winter_math::field::f128::BaseElement as winter_utils::serde::Deserializable&gt;::read_from (1 samples, 0.03%)</title><rect x="99.3187%" y="165" width="0.0262%" height="15" fill="rgb(210,56,17)" fg:x="3790" fg:w="1"/><text x="99.5687%" y="175.50"></text></g><g><title>winter_verifier::composer::DeepComposer&lt;E&gt;::compose_trace_columns (1 samples, 0.03%)</title><rect x="99.3449%" y="229" width="0.0262%" height="15" fill="rgb(224,130,29)" fg:x="3791" fg:w="1"/><text x="99.5949%" y="239.50"></text></g><g><title>winter_math::field::f128::mul (1 samples, 0.03%)</title><rect x="99.3449%" y="213" width="0.0262%" height="15" fill="rgb(235,212,8)" fg:x="3791" fg:w="1"/><text x="99.5949%" y="223.50"></text></g><g><title>winter_air::air::Air::get_boundary_constraints (2 samples, 0.05%)</title><rect x="99.3711%" y="213" width="0.0524%" height="15" fill="rgb(223,33,50)" fg:x="3792" fg:w="2"/><text x="99.6211%" y="223.50"></text></g><g><title>winter_math::field::f128::inv (2 samples, 0.05%)</title><rect x="99.3711%" y="197" width="0.0524%" height="15" fill="rgb(219,149,13)" fg:x="3792" fg:w="2"/><text x="99.6211%" y="207.50"></text></g><g><title>winter_air::air::divisor::ConstraintDivisor&lt;B&gt;::evaluate_at (1 samples, 0.03%)</title><rect x="99.4235%" y="213" width="0.0262%" height="15" fill="rgb(250,156,29)" fg:x="3794" fg:w="1"/><text x="99.6735%" y="223.50"></text></g><g><title>winter_math::field::f128::inv (1 samples, 0.03%)</title><rect x="99.4235%" y="197" width="0.0262%" height="15" fill="rgb(216,193,19)" fg:x="3794" fg:w="1"/><text x="99.6735%" y="207.50"></text></g><g><title>&lt;examples::do_work::DoWorkExample&lt;H&gt; as examples::Example&gt;::verify (9 samples, 0.24%)</title><rect x="99.2662%" y="261" width="0.2358%" height="15" fill="rgb(216,135,14)" fg:x="3788" fg:w="9"/><text x="99.5162%" y="271.50"></text></g><g><title>winter_verifier::verify (9 samples, 0.24%)</title><rect x="99.2662%" y="245" width="0.2358%" height="15" fill="rgb(241,47,5)" fg:x="3788" fg:w="9"/><text x="99.5162%" y="255.50"></text></g><g><title>winter_verifier::evaluator::evaluate_constraints (5 samples, 0.13%)</title><rect x="99.3711%" y="229" width="0.1310%" height="15" fill="rgb(233,42,35)" fg:x="3792" fg:w="5"/><text x="99.6211%" y="239.50"></text></g><g><title>winter_math::field::f128::inv (2 samples, 0.05%)</title><rect x="99.4497%" y="213" width="0.0524%" height="15" fill="rgb(231,13,6)" fg:x="3795" fg:w="2"/><text x="99.6997%" y="223.50"></text></g><g><title>_start (3,538 samples, 92.71%)</title><rect x="7.0231%" y="357" width="92.7149%" height="15" fill="rgb(207,181,40)" fg:x="268" fg:w="3538"/><text x="7.2731%" y="367.50">_start</text></g><g><title>__libc_start_main (3,538 samples, 92.71%)</title><rect x="7.0231%" y="341" width="92.7149%" height="15" fill="rgb(254,173,49)" fg:x="268" fg:w="3538"/><text x="7.2731%" y="351.50">__libc_start_main</text></g><g><title>[libc.so.6] (3,538 samples, 92.71%)</title><rect x="7.0231%" y="325" width="92.7149%" height="15" fill="rgb(221,1,38)" fg:x="268" fg:w="3538"/><text x="7.2731%" y="335.50">[libc.so.6]</text></g><g><title>main (3,538 samples, 92.71%)</title><rect x="7.0231%" y="309" width="92.7149%" height="15" fill="rgb(206,124,46)" fg:x="268" fg:w="3538"/><text x="7.2731%" y="319.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,538 samples, 92.71%)</title><rect x="7.0231%" y="293" width="92.7149%" height="15" fill="rgb(249,21,11)" fg:x="268" fg:w="3538"/><text x="7.2731%" y="303.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>winterfell::main (3,538 samples, 92.71%)</title><rect x="7.0231%" y="277" width="92.7149%" height="15" fill="rgb(222,201,40)" fg:x="268" fg:w="3538"/><text x="7.2731%" y="287.50">winterfell::main</text></g><g><title>examples::do_work::calculate_results (9 samples, 0.24%)</title><rect x="99.5021%" y="261" width="0.2358%" height="15" fill="rgb(235,61,29)" fg:x="3797" fg:w="9"/><text x="99.7521%" y="271.50"></text></g><g><title>blake3_compress_in_place_sse41 (9 samples, 0.24%)</title><rect x="99.7379%" y="357" width="0.2358%" height="15" fill="rgb(219,207,3)" fg:x="3806" fg:w="9"/><text x="99.9879%" y="367.50"></text></g><g><title>all (3,816 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="3816"/><text x="0.2500%" y="399.50"></text></g><g><title>winterfell (3,816 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(239,76,54)" fg:x="0" fg:w="3816"/><text x="0.2500%" y="383.50">winterfell</text></g><g><title>winter_math::field::f128::mul (1 samples, 0.03%)</title><rect x="99.9738%" y="357" width="0.0262%" height="15" fill="rgb(231,124,27)" fg:x="3815" fg:w="1"/><text x="100.2238%" y="367.50"></text></g></svg></svg>